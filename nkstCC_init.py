#=================================================================================================
# SCRIPT : nkstCC_init.py :: Nuke Studio Comp Cleaner
# v1.0
#-------------------------------------------------------------------------------------------------
# - Creates the _Debugprint class, that is used for printing messages by all scripts.
# - Checks things and launches the next script.
#=================================================================================================\
import nuke
import nukescripts
import os
import textwrap

#=================================================================================================
# CLASS : _DebugPrint
# v1.4
#-------------------------------------------------------------------------------------------------
# Used for clean, organized debugging.
# Ideally the print statements in this class should be the only ones in the script.
#=================================================================================================
class _DebugPrint:
    # At the beginning of every function, create an instance of this class like this:
    # >>> Log = _DebugPrint('NameOfFunction')
    # Print stuff like this:
    # >>> Log.msg('something')
    # Result:
    # Function :: NameOfFunction >> something
    def __init__(self,funcName,*enable):
        self.name   = funcName
        self.enable = True if not len(enable)>0 or enable[0]==True else False
        if self.enable : print "\nFunction :: ",self.name,"..."

    def msg(self,msg):
        if self.enable : 
            print "Function :: ",self.name,">>",msg

    def err(self,err):
        if self.enable : 
            import traceback
            import inspect
            callerframerecord = inspect.stack()[1]    # 0 represents this line, 1 represents line at caller
            frame = callerframerecord[0]
            info = inspect.getframeinfo(frame)
            line = info.lineno
            print "Function :: ",self.name,">>","Error at Line:",line,": ",err,"\n{"
            traceback.print_exc()
            print "\n}"

#=================================================================================================
# FUNCTION : ddList
# v 1.3 : specialized for nkstCC
#-------------------------------------------------------------------------------------------------
# Returns the name of the selected item in the list and value of the checkbox.
# :param dListName   : str     : Name of the dialog window and the name displayed beside the dropdown menu
# :param dListItems  : list    : [item[,*item]]
# :param defaultItem : str|int : Zero-based index or string for the item to default to
# :param *infoText   : str     : (optional) Text to display at the top of the window.
#=================================================================================================
def ddList(dListName,dListitems,defaultItem,*infoText):
    class DropDownlistWindow(nukescripts.PythonPanel): 
        def __init__(self, name,items,default,*info): 
            # Create the base of the window
            nukescripts.PythonPanel.__init__(self,"Select %s"%name) 
            # Disclaimer text
            discText = """Nuke Studio Comp Cleaner
- by Fynn Laue  2016
Cleans up .nk files generated by Nuke Studio.
Read the "README.md" for more information.
Run the script on comps that have just been generated.
DO NOT RUN on comps that have been worked on!!!
"""
            self.disclaimer = nuke.Text_Knob("")
            self.disclaimer.setValue(discText)
            # Create and populate the dropdown list
            self.dropDownList = nuke.Enumeration_Knob("mainPlate","",items) 
            self.dropDownList.setValue(default)
            self.dropDownList.clearFlag(nuke.STARTLINE)
            # Create info text
            if len(info)>0:
                # Add some returns to the text, so it doesn't go out of frame.
                modText = "\n".join(textwrap.wrap(info[0],width=60,replace_whitespace=False,drop_whitespace=True))
                self.dropDownList.setTooltip(modText)
            # Create divider1
            self.divider1 = nuke.Text_Knob("")
            self.divider1.setFlag(nuke.STARTLINE)
            # Create divider2
            self.divider2 = nuke.Text_Knob("")
            self.divider2.setFlag(nuke.STARTLINE)
            # Create Checkboxes
            # Set project Format
            self.setPrjFormat = nuke.Boolean_Knob("setPrjFormat","Set Project Format to: ",1)
            self.setPrjFormat.setTooltip("Sets the scripts 'root' format to the format of the 'Main Plate' selected in the drop down menu.")
            # Delete Nodes
            self.delNodes = nuke.Boolean_Knob("delNodes","Delete Unnecessary Nodes",1)
            self.delNodes.setTooltip("Deletes these nodes:\n- Reformat\n- Copy\n- Constant\n- AppendClip")
            self.delNodes.setFlag(nuke.STARTLINE)
            # Auto Write Node
            self.autoWriteNode = nuke.Boolean_Knob("autoWriteNode","Add 'AutoWriteFolder'",1)
            self.autoWriteNode.setTooltip("Adds a small python snippet to 'before render' field in all write nodes in the script.")
            self.autoWriteNode.setFlag(nuke.STARTLINE)
            # Version up
            self.vCheckBox = nuke.Boolean_Knob("versionUp","Version Up .nk Script",1)
            self.vCheckBox.setFlag(nuke.STARTLINE)
            #---------------------------------------------
            # Add the UI elements to the window.
            self.addKnob(self.disclaimer)
            self.addKnob(self.divider1)
            self.addKnob(self.setPrjFormat)
            self.addKnob(self.dropDownList)
            self.addKnob(self.delNodes)
            self.addKnob(self.autoWriteNode)
            self.addKnob(self.vCheckBox)
            self.addKnob(self.divider2)
    # Create instance of dropdownlist class
    if len(infoText)>0:
        ddListInstance = DropDownlistWindow(dListName,dListitems,defaultItem,infoText[0])
    else:
        ddListInstance = DropDownlistWindow(dListName,dListitems,defaultItem)
    # Show window
    dialog = ddListInstance.showModalDialog()
    # Return selected item
    if dialog:
        dic = {
            "setPrjFormat"  : ddListInstance.setPrjFormat.value(),
            "mainPlate"     : ddListInstance.dropDownList.value(),
            "delNodes"      : ddListInstance.delNodes.value(),
            "autoWriteNode" : ddListInstance.autoWriteNode.value(),
            "versionUp"     : ddListInstance.vCheckBox.value()
        }
        lis = [
            ddListInstance.dropDownList.value(), # Main Plate
            ddListInstance.vCheckBox.value(),    # VersionUp
            ddListInstance.setPrjFormat.value(), # Set project Format
            ddListInstance.delNodes.value(),     # Delete Nodes
            ddListInstance.autoWriteNode.value() # Auto Write Node
        ]
        return dic
    else:
        return None

#=================================================================================================
# FUNCTION : getNukeUserFolder
# v 1.0
#-------------------------------------------------------------------------------------------------
# Returns the .nuke folder path
#=================================================================================================
def getNukeUserFolder():
    for d in nuke.pluginPath():
        if os.path.isdir(d):
            if d.endswith(".nuke"):
                return d

#=================================================================================================
# FUNCTION : main
# v1.0
#-------------------------------------------------------------------------------------------------
# Checks if all scripts are where they should be.
# Launches the appropriate script according the the type of nuke mode we're in.
#=================================================================================================
def main():
    Log = _DebugPrint('nkstCC_init.main')

    # Python Scripts locations
    exeDir     = os.path.dirname(__file__) # preferably ~/.nuke
    rscDirname = "nkstCC_resources"
    rscDir     = os.path.join( exeDir,rscDirname ) # resources

    if not os.path.exists(rscDir):
        Log.msg("Can't find %s in %s.\nMake sure you have copied it and try again."%(rscDirname,exeDir))
        return

    # Add nkstCC_resources folder to nuke paths
    nuke.pluginAddPath(rscDir)

    # Nuke Studio Script
    nkstSN = "nkstCC_nkst.py"
    nkstSP = os.path.join(rscDir,nkstSN)
    # Nuke Script
    nukeSN = "nkstCC_nuke.py"
    nukeSP = os.path.join(rscDir,nukeSN)
    # Commandline Script
    cmdlSN = "nkstCC_cmd.py"
    cmdlSP = os.path.join(rscDir,cmdlSN)
    
    # Check nuke mode and assign script to run
    exeScriptPath = nkstSP if nuke.env['studio'] else nukeSP
    
    # Cancel if python script not found
    if not os.path.exists(exeScriptPath):
        msg = "Can't find the script file at %s"%(exeScriptPath)
        Log.msg(msg)
        nuke.message(msg)
        return
    
    import nkstCC_nkst
    import nkstCC_nuke
    # Launch exescript
    if nuke.env['studio']:
        Log.msg("Mode: nkst")
        nkstCC_nkst.main(cmdlSP)
    else:
        Log.msg("Mode: nuke")
        nkstCC_nuke.main()

#__INIT__
if __name__ == "__main__":
    main()